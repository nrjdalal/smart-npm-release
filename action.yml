name: "Smart NPM Release"
description: "Smart NPM Release"
author: "Neeraj Dalal"
branding:
  icon: "package"
  color: "red"
inputs:
  NPM_TOKEN:
    description: "NPM Token"
    required: true
  GITHUB_TOKEN:
    description: "GitHub Token"
    required: false
  TAG:
    description: "Release Tag"
    required: false
runs:
  using: "composite"
  steps:
    - id: CONFIG
      name: "Configuration"
      shell: bash
      run: |
        echo "PACKAGE_MANAGER=npm" >>$GITHUB_OUTPUT
        echo "PACKAGE_RUNNER=npx" >>$GITHUB_OUTPUT
        if [ -z "$(which node)" ] || [ "$(which node)" = "/usr/local/bin/node" ]; then
          echo "INSTALL_NODE=true" >>$GITHUB_OUTPUT
        fi
        if [ -f "bun.lock" ] || [ -f "bun.lockb" ]; then
          if ! command -v bun &>/dev/null; then
            echo "PACKAGE_MANAGER=bun" >>$GITHUB_OUTPUT
            echo "PACKAGE_RUNNER=bunx" >>$GITHUB_OUTPUT
            echo "INSTALL_BUN=true" >>$GITHUB_OUTPUT
          fi
        fi
        if [ -f "pnpm-lock.yaml" ]; then
          if ! command -v pnpm &>/dev/null; then
            echo "PACKAGE_MANAGER=pnpm" >>$GITHUB_OUTPUT
            echo "PACKAGE_RUNNER=pnpx" >>$GITHUB_OUTPUT
            echo "INSTALL_PNPM=true" >>$GITHUB_OUTPUT
          fi
        fi

    - if: ${{ steps.CONFIG.outputs.INSTALL_NODE == 'true' }}
      name: NODE not found. Installing NODE...
      uses: actions/setup-node@v4
      with:
        node-version: lts/*
        registry-url: ${{ inputs.REGISTRY_URL || 'https://registry.npmjs.org' }}

    - if: ${{ steps.CONFIG.outputs.INSTALL_BUN == 'true' }}
      name: BUN detected but not found. Installing BUN...
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        registry-url: ${{ inputs.REGISTRY_URL || 'https://registry.npmjs.org' }}

    - if: ${{ steps.CONFIG.outputs.INSTALL_PNPM == 'true' }}
      name: PNPM detected but not found. Installing PNPM...
      uses: pnpm/action-setup@v4
      with:
        version: latest
        registry-url: ${{ inputs.REGISTRY_URL || 'https://registry.npmjs.org' }}

    - name: "Smart NPM Release"
      shell: bash
      run: |
        # Smart NPM Release
        GITHUB_TOKEN="${{ inputs.GITHUB_TOKEN }}"
        NODE_AUTH_TOKEN="${{ inputs.NPM_TOKEN }}"
        NPM_CONFIG_TOKEN="${{ inputs.NPM_TOKEN }}"
        NPM_TOKEN="${{ inputs.NPM_TOKEN }}"
        TAG="${{ inputs.TAG }}"
        PACKAGE_MANAGER="${{ steps.CONFIG.outputs.PACKAGE_MANAGER }}"
        PACKAGE_RUNNER="${{ steps.CONFIG.outputs.PACKAGE_RUNNER }}"

        echo -e "\033[0;33m--- Checking if package exists in the npm registry ---\033[0m"
        package_name=$($PACKAGE_RUNNER json -f package.json -a name)
        package_version=$($PACKAGE_RUNNER json -f package.json -a version)
        npm view "$package_name" &>/dev/null || {
          echo "$package_name does not exist in the npm registry. Skipping publish."
          exit 0
        }
        echo "Package: $package_name"

        echo -e "\033[0;33m--- Determining the release version ---\033[0m"
        if [ -z "$TAG" ]; then
          release_version="$package_version"
        else
          current_tag_version=$(npm view "$package_name" dist-tags."$TAG" 2>/dev/null)
          if [ -z "$current_tag_version" ]; then
            IFS='.' read -r major minor patch <<<"$package_version"
            release_version="$major.$((minor + 1)).0-"$TAG".0"
          else
            IFS='.-' read -r tag_version_major tag_version_minor tag_version_patch tag_version_tag tag_version_version <<<"$current_tag_version"
            release_version="$tag_version_major.$tag_version_minor.$tag_version_patch-"$TAG".$((tag_version_version + 1))"
          fi
        fi
        echo "Release version: $release_version"

        echo -e "\033[0;33m--- Publishing the package ---\033[0m"
        if [ "$PACKAGE_MANAGER" = "bun" ]; then
          [ ! -d "node_modules" ] && bun i
          bunx json -I -f package.json -e "this.version=\"$release_version\"" &>/dev/null
          if [ -z "$TAG" ]; then
            npm publish --provenance --access public --no-git-checks
          else
            npm publish --provenance --access public --no-git-checks --tag "$TAG"
          fi
        elif [ "$PACKAGE_MANAGER" = "pnpm" ]; then
          [ ! -d "node_modules" ] && pnpm i
          pnpx json -I -f package.json -e "this.version=\"$release_version\"" &>/dev/null
          if [ -z "$TAG" ]; then
            pnpm publish --provenance --access public --no-git-checks
          else
            pnpm publish --provenance --access public --no-git-checks --tag "$TAG"
          fi
        else
          [ ! -d "node_modules" ] && npm i
          npx json -I -f package.json -e "this.version=\"$release_version\"" &>/dev/null
          if [ -z "$TAG" ]; then
            npm publish --provenance --access public --no-git-checks
          else
            npm publish --provenance --access public --no-git-checks --tag "$TAG"
          fi
        fi

        echo -e "\033[0;33m--- Updating the commit status ---\033[0m"
        if [ -n "$GITHUB_TOKEN" ]; then
          package_url="https://www.npmjs.com/package/$package_name/v/$release_version"
          curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments" \
            -d "{\"body\": \"Package released - [\`$package_name@$release_version\`]($package_url)\"}" &>/dev/null
          curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA" \
            -d "{\"state\": \"success\", \"context\": \"Package released\", \"description\": \"$package_name@$release_version\", \"target_url\": \"$package_url\"}" &>/dev/null
          echo "Commit status updated: https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        NODE_AUTH_TOKEN: ${{ inputs.NPM_TOKEN }} # If pnpm detected
        NPM_TOKEN: ${{ inputs.NPM_TOKEN }} # If npm detected
        NPM_CONFIG_TOKEN: ${{ inputs.NPM_TOKEN }} # If bun detected
        TAG: ${{ inputs.TAG }}
